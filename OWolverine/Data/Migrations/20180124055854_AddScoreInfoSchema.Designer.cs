// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using OWolverine.Data;
using System;

namespace OWolverine.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180124055854_AddScoreInfoSchema")]
    partial class AddScoreInfoSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OWolverine.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("OWolverine.Models.Ogame.Alliance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AllianceId");

                    b.Property<int?>("FounderId");

                    b.Property<bool>("IsOpen");

                    b.Property<string>("Name");

                    b.Property<int>("ServerId");

                    b.Property<string>("Tag");

                    b.HasKey("Id");

                    b.HasAlternateKey("AllianceId", "ServerId");

                    b.HasIndex("FounderId")
                        .IsUnique()
                        .HasFilter("[FounderId] IS NOT NULL");

                    b.HasIndex("ServerId");

                    b.ToTable("Alliance","og");
                });

            modelBuilder.Entity("OWolverine.Models.Ogame.Moon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("Size");

                    b.HasKey("Id");

                    b.ToTable("Moon","og");
                });

            modelBuilder.Entity("OWolverine.Models.Ogame.Planet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Coord");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<int?>("MoonId");

                    b.Property<string>("Name");

                    b.Property<int>("OwnerId");

                    b.Property<int>("PlanetId");

                    b.Property<int>("ServerId");

                    b.HasKey("Id");

                    b.HasAlternateKey("PlanetId", "ServerId");

                    b.HasIndex("MoonId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ServerId");

                    b.ToTable("Planet","og");
                });

            modelBuilder.Entity("OWolverine.Models.Ogame.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AllianceId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsBanned");

                    b.Property<bool>("IsFlee");

                    b.Property<bool>("IsInactive");

                    b.Property<bool>("IsLeft");

                    b.Property<bool>("IsVocation");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Name");

                    b.Property<int>("PlayerId");

                    b.Property<int?>("ScoreId");

                    b.Property<int>("ServerId");

                    b.HasKey("Id");

                    b.HasAlternateKey("PlayerId", "ServerId");

                    b.HasIndex("AllianceId");

                    b.HasIndex("ScoreId")
                        .IsUnique()
                        .HasFilter("[ScoreId] IS NOT NULL");

                    b.HasIndex("ServerId");

                    b.ToTable("Player","og");
                });

            modelBuilder.Entity("OWolverine.Models.Ogame.Score", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Economy");

                    b.Property<int>("Honor");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<int>("Military");

                    b.Property<int>("MilitaryBuit");

                    b.Property<int>("MilitaryDestroyed");

                    b.Property<int>("MilitaryLost");

                    b.Property<int>("Research");

                    b.Property<int>("Ships");

                    b.Property<int>("Total");

                    b.HasKey("Id");

                    b.ToTable("HighScore","og");
                });

            modelBuilder.Entity("OWolverine.Models.Ogame.Universe", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("Acs");

                    b.Property<DateTime?>("AllianceLastUpdate");

                    b.Property<float>("DebrisFactor");

                    b.Property<float>("DefToDebris");

                    b.Property<float>("DeuteriumSaveFactor");

                    b.Property<string>("Domain");

                    b.Property<bool>("DonutGalaxy");

                    b.Property<bool>("DonutSystem");

                    b.Property<float>("FleetSpeed");

                    b.Property<int>("Galaxies");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("PlanetsLastUpdate");

                    b.Property<DateTime?>("PlayersLastUpdate");

                    b.Property<bool>("RapidFire");

                    b.Property<float>("Speed");

                    b.Property<int>("Systems");

                    b.Property<int>("TopScore");

                    b.Property<bool>("WreckField");

                    b.HasKey("Id");

                    b.ToTable("Universe","og");
                });

            modelBuilder.Entity("OWolverine.Models.ScoreHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("NewValue");

                    b.Property<int>("OldValue");

                    b.Property<int?>("ScoreId");

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ScoreId");

                    b.ToTable("ScoreHistory","og");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OWolverine.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OWolverine.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OWolverine.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OWolverine.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OWolverine.Models.Ogame.Alliance", b =>
                {
                    b.HasOne("OWolverine.Models.Ogame.Player", "Founder")
                        .WithOne()
                        .HasForeignKey("OWolverine.Models.Ogame.Alliance", "FounderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OWolverine.Models.Ogame.Universe", "Server")
                        .WithMany("Alliances")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OWolverine.Models.Ogame.Planet", b =>
                {
                    b.HasOne("OWolverine.Models.Ogame.Moon", "Moon")
                        .WithMany()
                        .HasForeignKey("MoonId");

                    b.HasOne("OWolverine.Models.Ogame.Player", "Owner")
                        .WithMany("Planets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OWolverine.Models.Ogame.Universe", "Server")
                        .WithMany("Planets")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OWolverine.Models.Ogame.Player", b =>
                {
                    b.HasOne("OWolverine.Models.Ogame.Alliance", "Alliance")
                        .WithMany("Members")
                        .HasForeignKey("AllianceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OWolverine.Models.Ogame.Score", "Score")
                        .WithOne("Player")
                        .HasForeignKey("OWolverine.Models.Ogame.Player", "ScoreId");

                    b.HasOne("OWolverine.Models.Ogame.Universe", "Server")
                        .WithMany("Players")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OWolverine.Models.ScoreHistory", b =>
                {
                    b.HasOne("OWolverine.Models.Ogame.Score", "Score")
                        .WithMany("UpdateHistory")
                        .HasForeignKey("ScoreId");
                });
#pragma warning restore 612, 618
        }
    }
}
