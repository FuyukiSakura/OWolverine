// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using OWolverine.Data;
using System;

namespace OWolverine.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180111131144_LinkUniversePlayerAndPlanet")]
    partial class LinkUniversePlayerAndPlanet
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OWolverine.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("OWolverine.Models.Ogame.Planet", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("ServerId");

                    b.Property<string>("Coords");

                    b.Property<DateTime>("LastUpdate")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Name");

                    b.Property<int>("OwnerId");

                    b.Property<int?>("UniverseId");

                    b.HasKey("Id", "ServerId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ServerId")
                        .IsUnique();

                    b.HasIndex("UniverseId");

                    b.ToTable("Planet","og");
                });

            modelBuilder.Entity("OWolverine.Models.Ogame.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AllianceId");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsFlee");

                    b.Property<bool>("IsInactive");

                    b.Property<bool>("IsLeft");

                    b.Property<bool>("IsVocation");

                    b.Property<DateTime>("LastUpdate")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Name");

                    b.Property<int>("PlayerId");

                    b.Property<int>("ServerId");

                    b.Property<int?>("UniverseId");

                    b.HasKey("Id");

                    b.HasAlternateKey("Id", "ServerId");

                    b.HasIndex("ServerId")
                        .IsUnique();

                    b.HasIndex("UniverseId");

                    b.ToTable("Player","og");
                });

            modelBuilder.Entity("OWolverine.Models.Ogame.Universe", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("Acs");

                    b.Property<float>("DebrisFactor");

                    b.Property<float>("DefToDebris");

                    b.Property<float>("DeuteriumSaveFactor");

                    b.Property<string>("Domain");

                    b.Property<bool>("DonutGalaxy");

                    b.Property<bool>("DonutSystem");

                    b.Property<float>("FleetSpeed");

                    b.Property<int>("Galaxies");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Name");

                    b.Property<bool>("RapidFire");

                    b.Property<float>("Speed");

                    b.Property<int>("Systems");

                    b.Property<int>("TopScore");

                    b.Property<bool>("WreckField");

                    b.HasKey("Id");

                    b.ToTable("Universe","og");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OWolverine.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OWolverine.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OWolverine.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OWolverine.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OWolverine.Models.Ogame.Planet", b =>
                {
                    b.HasOne("OWolverine.Models.Ogame.Player", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OWolverine.Models.Ogame.Universe", "Server")
                        .WithOne()
                        .HasForeignKey("OWolverine.Models.Ogame.Planet", "ServerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OWolverine.Models.Ogame.Universe")
                        .WithMany("Planets")
                        .HasForeignKey("UniverseId");
                });

            modelBuilder.Entity("OWolverine.Models.Ogame.Player", b =>
                {
                    b.HasOne("OWolverine.Models.Ogame.Universe", "Server")
                        .WithOne()
                        .HasForeignKey("OWolverine.Models.Ogame.Player", "ServerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OWolverine.Models.Ogame.Universe")
                        .WithMany("Players")
                        .HasForeignKey("UniverseId");
                });
#pragma warning restore 612, 618
        }
    }
}
